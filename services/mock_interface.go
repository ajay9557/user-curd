// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"
	models "user-curd/models"

	gomock "github.com/golang/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// DeleteUserDetailsById mocks base method.
func (m *MockServices) DeleteUserDetailsById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserDetailsById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserDetailsById indicates an expected call of DeleteUserDetailsById.
func (mr *MockServicesMockRecorder) DeleteUserDetailsById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserDetailsById", reflect.TypeOf((*MockServices)(nil).DeleteUserDetailsById), id)
}

// FetchAllUserDetails mocks base method.
func (m *MockServices) FetchAllUserDetails() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllUserDetails")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllUserDetails indicates an expected call of FetchAllUserDetails.
func (mr *MockServicesMockRecorder) FetchAllUserDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllUserDetails", reflect.TypeOf((*MockServices)(nil).FetchAllUserDetails))
}

// FetchUserDetailsById mocks base method.
func (m *MockServices) FetchUserDetailsById(id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserDetailsById", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserDetailsById indicates an expected call of FetchUserDetailsById.
func (mr *MockServicesMockRecorder) FetchUserDetailsById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserDetailsById", reflect.TypeOf((*MockServices)(nil).FetchUserDetailsById), id)
}

// InsertUserDetails mocks base method.
func (m *MockServices) InsertUserDetails(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserDetails", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserDetails indicates an expected call of InsertUserDetails.
func (mr *MockServicesMockRecorder) InsertUserDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserDetails", reflect.TypeOf((*MockServices)(nil).InsertUserDetails), arg0)
}

// UpdateUserDetails mocks base method.
func (m *MockServices) UpdateUserDetails(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetails", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserDetails indicates an expected call of UpdateUserDetails.
func (mr *MockServicesMockRecorder) UpdateUserDetails(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetails", reflect.TypeOf((*MockServices)(nil).UpdateUserDetails), user)
}
