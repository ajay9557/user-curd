// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package services is a generated GoMock package.
package services

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServices is a mock of Services interface
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// IsUniqueEmail mocks base method
func (m *MockServices) IsUniqueEmail(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUniqueEmail", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUniqueEmail indicates an expected call of IsUniqueEmail
func (mr *MockServicesMockRecorder) IsUniqueEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUniqueEmail", reflect.TypeOf((*MockServices)(nil).IsUniqueEmail), email)
}

// IsNumberValid mocks base method
func (m *MockServices) IsNumberValid(number string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNumberValid", number)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNumberValid indicates an expected call of IsNumberValid
func (mr *MockServicesMockRecorder) IsNumberValid(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNumberValid", reflect.TypeOf((*MockServices)(nil).IsNumberValid), number)
}
