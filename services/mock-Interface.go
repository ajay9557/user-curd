// Code generated by MockGen. DO NOT EDIT.
// Source: /home/raramuri/Desktop/go/src/user-curd/services/Interface.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"
	model "user-curd/model"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// DeleteByUserId mocks base method.
func (m *MockUser) DeleteByUserId(Id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserId", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserId indicates an expected call of DeleteByUserId.
func (mr *MockUserMockRecorder) DeleteByUserId(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserId", reflect.TypeOf((*MockUser)(nil).DeleteByUserId), Id)
}

// InsertUserDetails mocks base method.
func (m *MockUser) InsertUserDetails(user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserDetails", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserDetails indicates an expected call of InsertUserDetails.
func (mr *MockUserMockRecorder) InsertUserDetails(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserDetails", reflect.TypeOf((*MockUser)(nil).InsertUserDetails), user)
}

// SearchAll mocks base method.
func (m *MockUser) SearchAll() ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAll")
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAll indicates an expected call of SearchAll.
func (mr *MockUserMockRecorder) SearchAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAll", reflect.TypeOf((*MockUser)(nil).SearchAll))
}

// SearchByUserId mocks base method.
func (m *MockUser) SearchByUserId(id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByUserId", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByUserId indicates an expected call of SearchByUserId.
func (mr *MockUserMockRecorder) SearchByUserId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByUserId", reflect.TypeOf((*MockUser)(nil).SearchByUserId), id)
}

// UpdateByUserId mocks base method.
func (m *MockUser) UpdateByUserId(usr *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByUserId", usr)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByUserId indicates an expected call of UpdateByUserId.
func (mr *MockUserMockRecorder) UpdateByUserId(usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByUserId", reflect.TypeOf((*MockUser)(nil).UpdateByUserId), usr)
}
