// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	models "zopsmart/Task/models"

	gomock "github.com/golang/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// CreateUserService mocks base method.
func (m *MockServices) CreateUserService(us models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserService", us)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserService indicates an expected call of CreateUserService.
func (mr *MockServicesMockRecorder) CreateUserService(us interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserService", reflect.TypeOf((*MockServices)(nil).CreateUserService), us)
}

// DeletebyIdService mocks base method.
func (m *MockServices) DeletebyIdService(Id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletebyIdService", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletebyIdService indicates an expected call of DeletebyIdService.
func (mr *MockServicesMockRecorder) DeletebyIdService(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletebyIdService", reflect.TypeOf((*MockServices)(nil).DeletebyIdService), Id)
}

// GetAllUsersService mocks base method.
func (m *MockServices) GetAllUsersService() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersService")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersService indicates an expected call of GetAllUsersService.
func (mr *MockServicesMockRecorder) GetAllUsersService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersService", reflect.TypeOf((*MockServices)(nil).GetAllUsersService))
}

// GetUserByIdService mocks base method.
func (m *MockServices) GetUserByIdService(Id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIdService", Id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIdService indicates an expected call of GetUserByIdService.
func (mr *MockServicesMockRecorder) GetUserByIdService(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIdService", reflect.TypeOf((*MockServices)(nil).GetUserByIdService), Id)
}

// UpdatebyIdService mocks base method.
func (m *MockServices) UpdatebyIdService(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatebyIdService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatebyIdService indicates an expected call of UpdatebyIdService.
func (mr *MockServicesMockRecorder) UpdatebyIdService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatebyIdService", reflect.TypeOf((*MockServices)(nil).UpdatebyIdService), arg0)
}
