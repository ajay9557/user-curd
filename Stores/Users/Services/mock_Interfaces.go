// Code generated by MockGen. DO NOT EDIT.
// Source: Icrud/Services (interfaces: ISUser)

// Package Services is a generated GoMock package.
package Services

import (
	TModels "Icrud/TModels"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockISUser is a mock of ISUser interface
type MockISUser struct {
	ctrl     *gomock.Controller
	recorder *MockISUserMockRecorder
}

// MockISUserMockRecorder is the mock recorder for MockISUser
type MockISUserMockRecorder struct {
	mock *MockISUser
}

// NewMockISUser creates a new mock instance
func NewMockISUser(ctrl *gomock.Controller) *MockISUser {
	mock := &MockISUser{ctrl: ctrl}
	mock.recorder = &MockISUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISUser) EXPECT() *MockISUserMockRecorder {
	return m.recorder
}

// DeleteUserById mocks base method
func (m *MockISUser) DeleteUserById(arg0 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserById indicates an expected call of DeleteUserById
func (mr *MockISUserMockRecorder) DeleteUserById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockISUser)(nil).DeleteUserById), arg0)
}

// GetUsers mocks base method
func (m *MockISUser) GetUsers() ([]TModels.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]TModels.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockISUserMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockISUser)(nil).GetUsers))
}

// InsertUser mocks base method
func (m *MockISUser) InsertUser(arg0 TModels.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockISUserMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockISUser)(nil).InsertUser), arg0)
}

// UpdateUserById mocks base method
func (m *MockISUser) UpdateUserById(arg0 TModels.User, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserById", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserById indicates an expected call of UpdateUserById
func (mr *MockISUserMockRecorder) UpdateUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserById", reflect.TypeOf((*MockISUser)(nil).UpdateUserById), arg0, arg1)
}

// UserById mocks base method
func (m *MockISUser) UserById(arg0 int) (TModels.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserById", arg0)
	ret0, _ := ret[0].(TModels.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserById indicates an expected call of UserById
func (mr *MockISUserMockRecorder) UserById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserById", reflect.TypeOf((*MockISUser)(nil).UserById), arg0)
}
