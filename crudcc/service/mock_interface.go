// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/shaurya-zopsmart/user-curd/crudcc/models"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// DeleteUsrById mocks base method.
func (m *MockUser) DeleteUsrById(Id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsrById", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsrById indicates an expected call of DeleteUsrById.
func (mr *MockUserMockRecorder) DeleteUsrById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsrById", reflect.TypeOf((*MockUser)(nil).DeleteUsrById), Id)
}

// GetAllUsrs mocks base method.
func (m *MockUser) GetAllUsrs() ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsrs")
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsrs indicates an expected call of GetAllUsrs.
func (mr *MockUserMockRecorder) GetAllUsrs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsrs", reflect.TypeOf((*MockUser)(nil).GetAllUsrs))
}

// GetEmail mocks base method.
func (m *MockUser) GetEmail(Email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail", Email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockUserMockRecorder) GetEmail(Email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockUser)(nil).GetEmail), Email)
}

// GetUsrById mocks base method.
func (m *MockUser) GetUsrById(Id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsrById", Id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsrById indicates an expected call of GetUsrById.
func (mr *MockUserMockRecorder) GetUsrById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsrById", reflect.TypeOf((*MockUser)(nil).GetUsrById), Id)
}

// InsertUsr mocks base method.
func (m *MockUser) InsertUsr(user models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUsr", user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUsr indicates an expected call of InsertUsr.
func (mr *MockUserMockRecorder) InsertUsr(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUsr", reflect.TypeOf((*MockUser)(nil).InsertUsr), user)
}

// UpdateUsr mocks base method.
func (m *MockUser) UpdateUsr(id int, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsr", id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsr indicates an expected call of UpdateUsr.
func (mr *MockUserMockRecorder) UpdateUsr(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsr", reflect.TypeOf((*MockUser)(nil).UpdateUsr), id, user)
}
